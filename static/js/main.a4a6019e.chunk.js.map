{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","type","value","onChange","change","placeholder","Result","_props$weather","weather","city","sunrise","temp","err","wind","pressure","sunset","date","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","className","App","state","handleInputChange","e","_this","setState","target","prevProps","prevState","_this2","this","length","API","concat","fetch","then","response","ok","json","data","console","log","time","toLocaleString","sys","main","speed","catch","components_Form","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a4a6019e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <form >\r\n      <input\r\n        type=\"text\"\r\n        value={props.value}\r\n        onChange={props.change}\r\n        placeholder=\"Wpisz miasto\"\r\n\r\n      />\r\n      {/* <button>Wyszukaj miasta</button> */}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Result.css'\r\n\r\nconst Result = (props) => {\r\n  const { city, sunrise, temp, err, wind, pressure, sunset, date, value } = props.weather;\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n    content = (\r\n      <div className=\"wrapp\">\r\n        <h3>Wyszukiwanie dla miasta: <em>{city}</em></h3>\r\n        <h4>Dane dla dnia i godziny: {date}</h4>\r\n        <h4>Aktualna temperatura: {temp} &#176;C</h4>\r\n        <h4>Wschód słońca dzisiaj o: {sunriseTime}</h4>\r\n        <h4>Zachód słońca dzisiaj o: {sunsetTime}</h4>\r\n        <h4>Prędkość wiatru wynosi: {wind}m/s</h4>\r\n        <h4>Cisnienie powietrza: {pressure}hPa</h4>\r\n      </div>\r\n    )\r\n  }\r\n  if (err && value === \"\") {\r\n    content = (\r\n      <div></div>\r\n    )\r\n  } else if (err) {\r\n    content = (\r\n      <div className=\"wrapp\">\r\n        <h3>Nie mamy w bazie: {city}</h3>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"result\" >\r\n      {err ? content : content}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport Form from './Form';\nimport Result from \"./Result\"\nimport './App.css';\n\n// Klucz do API\nconst APIKey = `3d6c235aba09729618223e83be2b8406`;\n\nclass App extends Component {\n\n\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    err: \"\",\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    })\n  }\n\n  // handleCitySubmit = (e) => {\n  //   e.preventDefault();\n  //   console.log(\"potwierdzony formularz\")\n\n  //   const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n\n  //   fetch(API)\n  //     .then(response => {\n  //       if (response.ok) {\n  //         return response\n  //       }\n  //       throw Error(\"Nie udało się\")\n  //     })\n  //     .then(response => response.json())\n  //     .then(data => {\n  //       console.log(data);\n  //       // const weather = data.\n  //       const time = new Date().toLocaleString();\n  //       this.setState(prevState => ({\n  //         city: prevState.value,\n  //         date: time,\n  //         sunrise: data.sys.sunrise,\n  //         sunset: data.sys.sunset,\n  //         temp: data.main.temp,\n  //         pressure: data.main.pressure,\n  //         wind: data.wind.speed,\n  //         err: false,\n\n  //       }))\n  //     })\n  //     .catch(err => {\n  //       console.log(err)\n  //       this.setState(prevState => {\n  //         return {\n  //           err: true,\n  //           city: `Nie mamy w bazie tego miasta ${prevState.value}`\n  //         }\n  //       })\n  //     })\n  // }\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(prevState.value);\n    // console.log(this.state.value);\n    if (this.state.value.length === 0) return\n    if (prevState.value !== this.state.value) {\n\n      const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            return response\n          }\n          // throw Error(\"Nie udało się\")\n        })\n        .then(response => response.json())\n        .then(data => {\n          console.log(data);\n          // const weather = data.\n          const time = new Date().toLocaleString();\n          this.setState(prevState => ({\n            city: prevState.value,\n            date: time,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed,\n            err: false,\n\n          }))\n        })\n        .catch(err => {\n          console.log(err)\n          this.setState(prevState => {\n            return {\n              err: true,\n              city: prevState.value,\n            }\n          })\n        })\n    }\n\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Form\n          value={this.state.value}\n          change={this.handleInputChange}\n        />\n        <Result\n          weather={this.state}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}